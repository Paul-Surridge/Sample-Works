Exceptions

	Overview:

		- Exception is an 'exceptional event' that occurs during runtime.
		- Exception is an object which is handed to the runtime system.
		- Exception is generated by either the program or the runtime system.
		- Exception contains all of the information concerning the error, type and state of program when it occured.

	Throwing an exception:

		- Exceptions that are thrown will cause the runtime system to find a portion of code 'Exception Handler' to handle it.
		- Exceptions are passed down the call stack from where it was thrown back to main() until exception handler is found to handle it.
		- Exceptions which are not handled, the program is terminated.

	Default Handler:

		- Exceptions which are not handled by the program will eventually be handled by the runtime systems default handler.
		- Exceptions handled by the default handler will cause the program to terminate and print out a stack trace.

	The Catch and Specifiy Requirement

		- Source code must honour and implement the 'catch and specify requirement' in order to complie, such that:
		- Source code that might throw an exception must be enclosed by:

			1. 'try':		Must be enclosed by a try statement.
			2. 'throws':		Must be enclosed by a method that states that it 'throws' that particular exception.

		 - However its should be noted that not all exceptions are subject to the 'catch and specifiy requirement' given the x2 differing types of exception.

	Exception Types:

		- There are x3 types of exception:

			1. Exception		[Checked]
			2. RuntimeException	[Unchecked]
			3. Error		[Unchecked]

		- There are x2 catagories of exception:

			1. Checked
			2. Unchecked

						 Object
						    |
						Throwable
					 ___________|___________________________________________
					|							|
					Exception (checked)					Error (unchecked)
			 _______________|_______________________________			|_______________
			|		|				|			|		|
			(checked)	RuntimeException (unchecked)	(checked)		(unchecked)	(unchecked)
					|_______________
					|		|
					(unchecked)	(unchecked)


	
		- Checked Exception:

			- Checked exceptions include:

				1. Exception
				2. Exception Extension (excluding anything extended by RuntimeException)

			- Checked exceptions are specifically and explicitly defined exceptions.
			- Checked exceptions are subject to the 'catch and specify requirement'.
			- Checked exceptions are intentionally anticipated and appropriately handled by the program without causing the JVM to terminate.
			- Checked exceptions are utilised within x2 scopes:

				1. Method:		Method must declare all potential checked exception(s) within an exception list and manually instantiate and throws the exception upon a particular condition.

								private void method(int i) throws Exception, ExceptionExtended1, ExceptionExtended2...
								{
									if(condition 1)
									    throw new ExceptionExtended1();

									if(condition 2)
									    throw new ExceptionExtended2();

									if(condition 3)
									    throw new Exception();
								}

							Rules of Use:

								1. Any thrown exception must be declared in the exception list.
								2. Any thrown exception can be an extension of any of the exceptions declared in the extension list.

				2. try-catch-finally:	Try-catch-finally block forms an enclosure to monitor for the exception(s) as listed within the catch statement(s).

								private void method(int i)
								{
									try
									{
									    if(condition)
									        throw new ExceptionExtended1();

									    if(condition 2)
									    	throw new ExceptionExtended2();

									    if(condition 3)
									    	throw new Exception();
									}
									catch(ExceptionExtended1 | ExceptionExtended2 e){}
									catch(Exception e){}
									finally{}
								} 

							Rules of Use:

								1. Any thrown exception must have an accompanying catch statement containing that exception.
								2. Any thrown exception can be an extension of any exception contained in a catch statement.
								3. Extensions of Exception must be first in the catch list with more super extensions of Exception going last to prevent any unreachable catch statements.

		- Unchecked Exception:

			- Unchecked extensions include:

				1. RuntimeException
				2. RuntimeException Extension
				3. Error
				4. Error Extension

			- Runtime Exception:

				- Runtime exceptions are instigated and generated by the runtime system.
				- Runtime exceptions may be generated at anytime by the runtime system.
				- Runtime exceptions are not explicitly thrown by the program, but may be handled by the program if chosen to do so.
				- Runtime exceptions are exceptions which may occur not all the time but under certain circumstances, for example:

					IndexOutOfBoundsException
					BufferOverflowException
					NullPointerException
					DividByZeroException
					...

				- Runtime exceptions do not need to be declared within methods exception list.				
				- Runtime exceptions may only be caught and handled within:

					1. try-catch-finally blocks:		Runtime exception is explicitly mentioned within within catch block.

											private void method(int i)
											{
												try
												{
									    		    	    //processing which is monitored for any of the runtime exceptions listed below.
												}
												catch(IndexOutOfBoundsException | BufferOverflowException e){}
												catch(RuntimeException e){}
												finally{}
											}

					2. Default Handler:			Runtime exception is thrown outside of a try-catch-finally block where it is passed to the default handler which will terminate the program and print a stack trace.

			- Error:

				- Errors are external to the program.
				- Errors can not be anticipated nor recovered from.
				- Errors are substantial malfunction of external elements e.g. network connection, disc failure.
				- Errors are naturally unchecked given that they may occur at anytime.
				- Errors would be significant system failure e.g. disc or hardware failure.
				- Errors are typically so significant that the whole program, JVM or system may have failed before they could be handled.

