Collections - Deque:

	Overview:

		- Double ended queue.
		- Head: First Element.
		- Tail: Last Element.
		- Can be used as either:

			1. FIFO (Queue)
			2. LIFO (Stack)
			3. LIFO (Double Ended Stack - not Queue?)

		- Both Limited and UnLimited in size.
		- Preference to legacy Stack.
		- No Index Referencing

	API:

			Return Type		Method					Description
		____________________________________________________________________________________________________________________________________________________________________________________________________________________________

		Throw Exception:

		    Head:

			void			addFirst​(E e)				Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.
			E			removeFirst()				Retrieves and removes the first element of this deque.
			E			getFirst()				Retrieves, but does not remove, the first element of this deque.

		    Tail:

			void			addLast​(E e)				Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.
			E			removeLast()				Retrieves and removes the last element of this deque.
			E			getLast()				Retrieves, but does not remove, the last element of this deque.

		Return Special Value:

		    Head:

			boolean			offerFirst​(E e)				Inserts the specified element at the front of this deque unless it would violate capacity restrictions.
			E			pollFirst()				Retrieves and removes the first element of this deque, or returns null if this deque is empty.
			E			peekFirst()				Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.

		    Tail:

			boolean			offerLast​(E e)				Inserts the specified element at the end of this deque unless it would violate capacity restrictions.
			E			pollLast()				Retrieves and removes the last element of this deque, or returns null if this deque is empty.
			E			peekLast()				Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.

		Add/Remove:

			boolean			add​(E e)				Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.
			boolean			addAll​(Collection<? extends E> c)	Adds all of the elements in the specified collection at the end of this deque, as if by calling addLast(E) on each one, in the order that they are returned by the collection's iterator.

			E			remove()				Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque).
			boolean			remove​(Object o)			Removes the first occurrence of the specified element from this deque.
			boolean			removeFirstOccurrence​(Object o)		Removes the first occurrence of the specified element from this deque.
			boolean			removeLastOccurrence​(Object o)		Removes the last occurrence of the specified element from this deque.

		Query:

			boolean			contains​(Object o)			Returns true if this deque contains the specified element.
			int			size()					Returns the number of elements in this deque.

		Iterator:

			Iterator<E>		descendingIterator()			Returns an iterator over the elements in this deque in reverse sequential order.
			Iterator<E>		iterator()				Returns an iterator over the elements in this deque in proper sequence.

		Queue/Stack:
			
			E			element()				Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque).
			boolean			offer​(E e)				Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available.
			E			peek()					Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.
			E			poll()					Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty.
			E			pop()					Pops an element from the stack represented by this deque.
			void			push​(E e)				Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available.

		Methods As Declared In:

			java.util.Collection:

				clear, containsAll, equals, hashCode, isEmpty, parallelStream, removeAll, removeIf, retainAll, spliterator, stream, toArray, toArray, toArray

			java.lang.Iterable:

				forEach

	Implementations

		1. ArrayDeque
		2. ConcurrentLinkedDeque
		3. LinkedBlockingDeque
		4. LinkedList

	Notes:

		Form(s):			Double Ended	Queue		Stack
						Stack
			_____________________________________________________________________

			[First Element]		LIFO		FIFO		LIFO

			Head:			Added/Removed	Removed		Added/Removed
			_
			_
			_
			_
			_
			_
			_
			_

			Tail:			Added/Removed	Added		-

			[Last Element]	

		Method Catagories:

			Prefix:

				Throws Exception:

					add...()
					remove...()
					get...()

				Special Value:

					offer...()
					poll...()
					peek...()

			Suffix:

				First:		Head
				Last:		Tail

		null Elements:

			- Deques (as per Queues) generally do not allow insertion of null Elements.
			- Given that the Special Case return type could be a null.

		equals() hashCode():

			- Deques do not override and provide Element based equals() and hashCode().
			- Deques inherit the identity based versions from Object.




